name: scheduled-workflow

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

jobs:
  # Build and new deploy based on latest release of MIE
  build-content-localization-dev-us-west-2:
    runs-on: ubuntu-latest
    steps:
      - name: Check out development branch
        uses: actions/checkout@v2.3.4
        with:
          ref: development

      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup build environment
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          DATETIME=$(date '+%s')
          echo "DIST_OUTPUT_BUCKET=content-localization-on-aws-$DATETIME-dist" >> $GITHUB_ENV
          echo "TEMPLATE_OUTPUT_BUCKET=content-localization-on-aws-$DATETIME" >> $GITHUB_ENV

      - name: Run build script
        run: |
          cd deployment
          CONTENT_LOCALIZATION_STACK_NAME="cl"
          EMAIL=${{ secrets.INVITATION_EMAIL_RECIPIENT }}
          REGION="us-west-2"
          VERSION=${SHORT_SHA}
          aws s3 mb s3://$DIST_OUTPUT_BUCKET-$REGION --region $REGION
          aws s3 mb s3://$TEMPLATE_OUTPUT_BUCKET --region $REGION
          ./build-s3-dist.sh --template-bucket ${TEMPLATE_OUTPUT_BUCKET} --code-bucket ${DIST_OUTPUT_BUCKET} --version ${VERSION} --region ${REGION}
          echo "Templates artifacts:"
          cat ./template_url_that_uses_an_existing_mie_stack.txt
          cat ./template_url_that_deploys_mie_as_nested_stack.txt
      - name: 'Upload CL One-click Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrlMieDevelopment
          path: deployment/template_url_that_uses_an_existing_mie_stack.txt
          retention-days: 3

  build-mie-dev-us-west-2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout MIE development branch
        uses: actions/checkout@v2
        with:
          repository: awslabs/aws-media-insights-engine
          ref: development

      - name: Initialize AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Run build script
        run: |
          cd deployment
          MIE_STACK_NAME="mi"
          REGION=us-west-2
          VERSION=${SHORT_SHA}
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=micl-dev-us-west-2
          echo y | ./build-s3-dist.sh --no-layer --template-bucket $TEMPLATE_OUTPUT_BUCKET --code-bucket $DIST_OUTPUT_BUCKET --version $VERSION --region $REGION
          read -r TEMPLATE < templateUrl.txt
      - name: 'Upload MIE One-click Deployment Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: templateUrl
          path: deployment/templateUrl.txt
          retention-days: 3

  scan-3rd-party-data-us-west-2:
    needs: build-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out development branch
        uses: actions/checkout@v2.3.4
        with:
          ref: development

      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # FIXME - need to identify what to scan for here - new entries in packages,
      # python dependencies, other copyrighted code ...
      - name: Get stack name
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=cl" >> $GITHUB_ENV

      - name: Scan for new third party packages
        run: |
          echo "TBD - scan for new 3rd party pacakges"

      # FIXME - need to identify what to scan for here - is Trufflehog enough?
      - name: Scan for sensitive data
        run: |
          echo "TBD - Scan for sensitive data"

      # FIXME - need to make sure this is working properly
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: '--regex --entropy=False'

  scan-us-west-2:
    needs: build-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out development branch
        uses: actions/checkout@v2.3.4
        with:
          ref: development

      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          echo "CONTENT_LOCALIZATION_STACK_NAME=cl" >> $GITHUB_ENV

      - name: Run cfn_nag
        uses: stelligent/cfn_nag@master
        continue-on-error: true
        with:
          input_path: deployment

      # FIXME - This is not working.  Need to test more
      # check it with Hawkeye
      # - name: Hawkeye Scanner
      #   uses: ./.github/actions/hawkeye-scan

  deploy-mie-dev-us-west-2:
    needs: build-mie-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out development branch
        uses: actions/checkout@v2.3.4
        with:
          ref: development
      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Generate short sha
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=cl" >> $GITHUB_ENV
          echo "MIE_STACK_NAME=mi" >> $GITHUB_ENV
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Deploy
        run: |
          EMAIL=${{ secrets.INVITATION_EMAIL_RECIPIENT }}
          REGION=us-west-2
          VERSION={SHORT_SHA}
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=$DIST_OUTPUT_BUCKET-$REGION
          TEMPLATE=`cat templateUrl/templateUrl.txt`

          # Delete $MIE_STACK_NAME if it already exists.
          # This is necessary in order to rerun github action workflows.
          # If $MIE_STACK_NAME exists...
          if [ $(echo $(aws cloudformation list-stacks --query 'StackSummaries[?StackName==`$MIE_STACK_NAME`]' --output text)  | tr -d '\n' | wc -c) > 0 ]; then
            echo "Removing stack, $CONTENT_LOCALIZATION_STACK_NAME"
            # Then delete $MIE_STACK_NAME, but first delete $CONTENT_LOCALIZATION_STACK_NAME since we can't delete $MIE_STACK_NAME until we've removed the dependent stack.
            aws cloudformation delete-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME --region $REGION
            aws cloudformation wait stack-delete-complete --stack-name $CONTENT_LOCALIZATION_STACK_NAME

            echo "Removing stack, $MIE_STACK_NAME"
            aws cloudformation delete-stack --stack-name $MIE_STACK_NAME --region $REGION
            aws cloudformation wait stack-delete-complete --stack-name $MIE_STACK_NAME
          fi

          echo "deploy cloudformation: 'aws cloudformation create-stack --stack-name $MIE_STACK_NAME --template-url $TEMPLATE --region $REGION --parameters ParameterKey=DeployTestResources,ParameterValue=true ParameterKey=MaxConcurrentWorkflows,ParameterValue=10 ParameterKey=DeployAnalyticsPipeline,ParameterValue=true ParameterKey=EnableXrayTrace,ParameterValue=true --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback'"

          aws cloudformation create-stack --stack-name $MIE_STACK_NAME --template-url $TEMPLATE --region $REGION --parameters ParameterKey=DeployTestResources,ParameterValue=true ParameterKey=MaxConcurrentWorkflows,ParameterValue=10 ParameterKey=DeployAnalyticsPipeline,ParameterValue=true ParameterKey=EnableXrayTrace,ParameterValue=true --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback
          aws cloudformation wait stack-create-complete --stack-name $MIE_STACK_NAME
          exit 0

  deploy-content-localization-dev-us-west-2:
    needs:
      - deploy-mie-dev-us-west-2
      - build-content-localization-dev-us-west-2
      - scan-us-west-2
      - scan-3rd-party-data-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out development branch
        uses: actions/checkout@v2.3.4
        with:
          ref: development
      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Generate short sha
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=cl" >> $GITHUB_ENV
          echo "MIE_STACK_NAME=mi" >> $GITHUB_ENV
          echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: Deploy
        run: |
          EMAIL=${{ secrets.INVITATION_EMAIL_RECIPIENT }}
          REGION=us-west-2
          VERSION=${SHORT_SHA}
          DIST_OUTPUT_BUCKET=micl-dev
          TEMPLATE_OUTPUT_BUCKET=$DIST_OUTPUT_BUCKET-$REGION
          CLOUDFORMATION_TEMPLATE=`cat templateUrlMieDevelopment/template_url_that_uses_an_existing_mie_stack.txt`

          # Delete $CONTENT_LOCALIZATION_STACK_NAME if it already exists.
          # This is necessary in order to rerun github action workflows.
          # If $CONTENT_LOCALIZATION_STACK_NAME exists...
          if [ $(echo $(aws cloudformation list-stacks --query 'StackSummaries[?StackName==`$CONTENT_LOCALIZATION_STACK_NAME`]' --output text)  | tr -d '\n' | wc -c) > 0 ]; then
            # Then delete $CONTENT_LOCALIZATION_STACK_NAME...
            echo "Removing $CONTENT_LOCALIZATION_STACK_NAME so we can use that stack name again"
            aws cloudformation delete-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME --region $REGION
            aws cloudformation wait stack-delete-complete --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          fi

          echo "deploy cloudformation: 'aws cloudformation create-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME --template-url $CLOUDFORMATION_TEMPLATE --region $REGION --parameters ParameterKey=AdminEmail,ParameterValue=$EMAIL ParameterKey=MieStackName,ParameterValue=$MIE_STACK_NAME ParameterKey=OpensearchNodeSize,ParameterValue=t3.small.search --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback'"

          aws cloudformation create-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME --template-url $CLOUDFORMATION_TEMPLATE --region $REGION --parameters ParameterKey=AdminEmail,ParameterValue=$EMAIL ParameterKey=MieStackName,ParameterValue=$MIE_STACK_NAME ParameterKey=OpensearchNodeSize,ParameterValue=t3.small.search --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback
          aws cloudformation wait stack-create-complete --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          exit 0

  test-content-localization-dev-us-west-2:
    needs: deploy-content-localization-dev-us-west-2
    runs-on: ubuntu-latest
    env:
      MIE_REGION: 'us-west-2'
    steps:
      - name: Check out development branch
        uses: actions/checkout@v2.3.4
        with:
          ref: development

      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2

      - name: Generate short sha
        run: |
          echo "CONTENT_LOCALIZATION_STACK_NAME=cl" >> $GITHUB_ENV
          echo "MIE_STACK_NAME=mi" >> $GITHUB_ENV
      - name: Run cfn_nag
        uses: stelligent/cfn_nag@master
        continue-on-error: true
        with:
            input_path: deployment
      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Setup Chromedriver
        uses: nanasess/setup-chromedriver@master
      - name: Get user pool id
        run: |
          echo "USER_POOL_ID=`aws cloudformation describe-stacks --query 'Stacks[?starts_with(StackName, \`cl-AuthStack\`)].Outputs[1].OutputValue' --output text`" >> $GITHUB_ENV
      - name: Reset CL user password
        run: |
          aws cognito-idp admin-set-user-password --user-pool-id $USER_POOL_ID --username ${{ secrets.TEST_ADMIN_EMAIL }} --password ${{ secrets.TEST_ADMIN_PASSWORD }} --permanent
      - name: Get Content Localization endpoint
        run: |
          echo "APP_ENDPOINT=`aws cloudformation describe-stacks --query 'Stacks[?starts_with(StackName, \`cl-WebStack\`)].Outputs[0].OutputValue' --output text`" >> $GITHUB_ENV
      - name: Set admin creds
        run: |
          echo APP_USERNAME=${{ secrets.TEST_ADMIN_EMAIL }} >> $GITHUB_ENV
          echo APP_PASSWORD=${{ secrets.TEST_ADMIN_PASSWORD }} >> $GITHUB_ENV
      - name: Set media path and file name
        run: |
          echo TEST_MEDIA_PATH=$GITHUB_WORKSPACE/test/e2e/ >> $GITHUB_ENV
          echo TEST_FILE_NAME=run_e2e.sh >> $GITHUB_ENV
      - name: Initialize test AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
            aws-region: us-west-2
      - name: Run e2e tests
        run: |
          cd $GITHUB_WORKSPACE
          cd test/e2e
          ./run_e2e.sh
      - name: Initialize build AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Delete stacks
        run: |
          aws cloudformation delete-stack --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          aws cloudformation wait stack-delete-complete --stack-name $CONTENT_LOCALIZATION_STACK_NAME
          aws cloudformation delete-stack --stack-name $MIE_STACK_NAME
          aws cloudformation wait stack-delete-complete --stack-name $MIE_STACK_NAME
